<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Math Adventure - Decimal Multiplication</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.6.0/dist/confetti.browser.min.js"></script>
  <style>
    :root {
      --primary-color: #6c5ce7;
      --secondary-color: #4cc9f0;
      --correct-color: #c1fba4;
      --incorrect-color: #ff9aa2;
      --background-color: #f0f9ff;
      --card-color: #ffffff;
      --text-color: #333333;
    }

    .dark-mode {
      --primary-color: #a991f0;
      --secondary-color: #2d87a8;
      --correct-color: #4c8a2e;
      --incorrect-color: #b33a4a;
      --background-color: #1a1a2e;
      --card-color: #16213e;
      --text-color: #e6e6e6;
    }

    body {
      background-color: var(--background-color);
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: var(--text-color);
      transition: all 0.3s;
    }

    .card {
      border-radius: 15px;
      box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1);
      border: none;
      transition: transform 0.3s;
      background-color: var(--card-color);
    }

    .card:hover {
      transform: translateY(-5px);
    }

    .btn-home {
      background-color: #ff6b6b;
      color: white;
      transition: all 0.3s;
    }

    .btn-home:hover {
      transform: scale(1.05);
    }

    .hidden {
      display: none !important;
    }

    .problem-display {
      font-size: 1.5rem;
      font-weight: bold;
      color: var(--primary-color);
      text-align: center;
      margin: 15px 0;
    }

    .input-step {
      width: 100px;
      border: 2px solid var(--secondary-color);
      border-radius: 5px;
      padding: 5px;
      text-align: center;
      background-color: var(--card-color);
      color: var(--text-color);
    }

    .step-box {
      padding: 20px;
      background: var(--card-color);
      border-radius: 10px;
      margin: 15px 0;
    }

    .final-answer-box {
      display: none;
      text-align: center;
      margin-top: 20px;
    }

    .correct {
      background-color: var(--correct-color) !important;
    }

    .incorrect {
      background-color: var(--incorrect-color) !important;
    }

    .practice-step {
      background-color: var(--card-color);
      border-radius: 8px;
      padding: 12px;
      margin-bottom: 10px;
      border-left: 4px solid var(--primary-color);
    }

    .step-number {
      display: inline-block;
      background-color: var(--primary-color);
      color: white;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      text-align: center;
      line-height: 30px;
      margin-right: 10px;
      font-weight: bold;
    }

    .step-content {
      display: inline-block;
      vertical-align: middle;
      width: calc(100% - 50px);
    }

    .tooltip-explanation {
      font-size: 0.9rem;
      color: var(--text-color);
      margin-top: 5px;
      opacity: 0.8;
    }

    .score-box {
      text-align: right;
      margin-bottom: 10px;
      font-weight: bold;
    }

    #summary {
      text-align: center;
      font-size: 1.2rem;
      font-weight: bold;
      color: var(--text-color);
      margin-top: 20px;
    }

    .progress {
      height: 10px;
      margin-bottom: 20px;
    }

    .celebration {
      animation: celebrate 2s;
      transform: scale(1.1);
      background-color: rgba(108, 92, 231, 0.1);
      border-radius: 10px;
      padding: 20px;
      margin: 20px 0;
      text-align: center;
      border: 2px dashed var(--primary-color);
    }

    @keyframes celebrate {
      0% { transform: scale(1); }
      50% { transform: scale(1.2); }
      100% { transform: scale(1.1); }
    }

    .reward-message {
      font-size: 1.8rem;
      color: var(--primary-color);
      font-weight: bold;
      margin: 15px 0;
    }

    .reward-emoji {
      font-size: 2.5rem;
      animation: bounce 1s infinite alternate;
      display: inline-block;
    }

    @keyframes bounce {
      from { transform: translateY(0); }
      to { transform: translateY(-15px); }
    }

    .hint-box {
      background-color: rgba(76, 201, 240, 0.1);
      border-left: 4px solid var(--secondary-color);
      padding: 10px;
      margin: 10px 0;
      border-radius: 0 5px 5px 0;
    }

    .decimal-construction {
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 15px 0;
      font-size: 1.5rem;
    }

    .decimal-digit {
      padding: 5px 10px;
      margin: 0 2px;
      border-radius: 5px;
      background-color: rgba(76, 201, 240, 0.2);
      position: relative;
      min-width: 30px;
      text-align: center;
    }

    .decimal-point {
      font-size: 1.5rem;
      margin: 0 5px;
    }

    .partial-multiplication {
      margin: 10px 0;
      padding: 10px;
      background-color: rgba(108, 92, 231, 0.1);
      border-radius: 5px;
    }

    @media (max-width: 768px) {
      .problem-display {
        font-size: 1.2rem;
      }
      .input-step {
        width: 80px;
      }
      .step-content {
        width: calc(100% - 40px);
      }
      .reward-message {
        font-size: 1.4rem;
      }
    }
  </style>
</head>

<body>
  <audio id="success-sound" src="https://cdn.pixabay.com/download/audio/2022/03/15/audio_44ba749e2a.mp3?filename=success-1-6297.mp3"></audio>
  <audio id="celebration-sound" src="https://cdn.pixabay.com/download/audio/2021/08/09/audio_3d35597d4e.mp3?filename=success-fanfare-trumpets-6185.mp3"></audio>

  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
      <div class="score-box">
        Score: <span id="score">0</span> | Question: <span id="question-count">1</span>/<span id="max-questions">10</span>
      </div>
      <button class="btn btn-sm btn-outline-secondary" id="toggle-theme">üåô Dark Mode</button>
    </div>

    <div class="progress">
      <div id="progress-bar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
    </div>

    <div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-2">
      <div class="d-flex gap-2 flex-wrap">
        <a href="index.html" class="btn btn-home">üè† Home</a>
        <a href="math_multiplication_division.html" class="btn btn-outline-primary">‚ú¥Ô∏è Decimal Multiplication</a>
        <a href="division.html" class="btn btn-outline-info">‚ûó Divide with Decimals</a>
        <a href="longdivision.html" class="btn btn-outline-success">üßÆ Long Division</a>
      </div>
    </div>

    <div class="card p-4">
      <h1 class="text-center" style="color: var(--primary-color);">‚úñÔ∏è Decimal Multiplication ‚úñÔ∏è</h1>
      <p class="text-center">Multiply as whole numbers, then adjust for decimal places. Add the decimal places from both factors to get the final result.</p>
      <div class="text-center mb-4">
        <h4>Choose difficulty:</h4>
        <button class="btn btn-success m-1" id="easy-btn">Easy (1 decimal)</button>
        <button class="btn btn-warning m-1" id="medium-btn">Medium (1-2 decimals)</button>
        <button class="btn btn-danger m-1" id="hard-btn">Hard (2-3 decimals)</button>
      </div>

      <div id="game-area" class="hidden">
        <div class="problem-display" id="problem-text"></div>

        <div class="step-box teacher-example">
          <h4>üß† Teacher's Example</h4>
          <div class="problem-display" id="teacher-problem"></div>
          <div id="teacher-steps"></div>
        </div>

        <div class="step-box">
          <h4>üìù Your Turn</h4>
          <div class="problem-display" id="student-problem"></div>
          <div id="student-steps"></div>

          <div id="final-celebration" class="hidden"></div>
          <div class="final-answer-box" id="final-answer-box">
            <h5>Final Answer:</h5>
            <input type="number" step="0.01" id="user-answer" class="input-step" />
            <button class="btn btn-success" id="submit-final-btn">Submit</button>
            <div id="final-feedback" class="mt-2"></div>
          </div>
        </div>

        <div id="summary"></div>

        <div class="text-center mt-3">
          <button class="btn btn-primary hidden" id="try-again-btn">Try Again</button>
          <button class="btn btn-secondary hidden" id="new-game-btn">New Game</button>
          <button class="btn btn-success hidden" id="next-question-btn">Next Question ‚û°Ô∏è</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    let correctAnswer = 0;
    let score = 0;
    let questionCount = 0;
    let currentDifficulty = 'easy';
    const maxQuestions = 10;
    let darkMode = false;
    
    function randomDecimal(difficulty) {
      const decimals = difficulty === 'easy' ? 1 : difficulty === 'medium' ? (Math.random() > 0.5 ? 1 : 2) : (Math.random() > 0.5 ? 2 : 3);
      const base = difficulty === 'easy' ? 10 : difficulty === 'medium' ? 50 : 100;
      return (Math.random() * base).toFixed(decimals);
    }
    
    function setupProblem(difficulty) {
      if (questionCount >= maxQuestions) {
        showSummary();
        return;
      }
    
      document.getElementById('final-celebration').classList.add('hidden');
      document.getElementById('final-celebration').innerHTML = '';
      currentDifficulty = difficulty;
      updateProgress();
    
      const studentNum1 = randomDecimal(difficulty);
      const studentNum2 = randomDecimal(difficulty);
    
      correctAnswer = (parseFloat(studentNum1) * parseFloat(studentNum2)).toFixed(2);
    
      const teacherStepsDiv = document.getElementById('teacher-steps');
      teacherStepsDiv.innerHTML = '';
      const teacherNum1 = '2.5';
      const teacherNum2 = '1.2';
      const teacherResult = (parseFloat(teacherNum1) * parseFloat(teacherNum2)).toFixed(2);
    
      const dec1 = (teacherNum1.split('.')[1] || '').length;
      const dec2 = (teacherNum2.split('.')[1] || '').length;
      const totalDecimals = dec1 + dec2;
      const wholeNum1 = parseInt(teacherNum1.replace('.', ''));
      const wholeNum2 = parseInt(teacherNum2.replace('.', ''));
      const multiplied = wholeNum1 * wholeNum2;
    
      teacherStepsDiv.innerHTML += `
        <div class="practice-step">
          <div class="step-number">1</div>
          <div class="step-content">
            <strong>Count decimal places:</strong><br>
            ${teacherNum1} has ${dec1} decimal place${dec1 !== 1 ? 's' : ''}<br>
            ${teacherNum2} has ${dec2} decimal place${dec2 !== 1 ? 's' : ''}<br>
            <strong>Total:</strong> ${totalDecimals} decimal places.
          </div>
        </div>
        <div class="practice-step">
          <div class="step-number">2</div>
          <div class="step-content">
            <strong>Convert to whole numbers:</strong><br>
            ${teacherNum1} ‚Üí ${wholeNum1} (remove decimal point)<br>
            ${teacherNum2} ‚Üí ${wholeNum2} (remove decimal point)
          </div>
        </div>
        <div class="practice-step">
          <div class="step-number">3</div>
          <div class="step-content">
            <strong>Multiply whole numbers:</strong><br>
            ${wholeNum1} √ó ${wholeNum2} = ${multiplied}
          </div>
        </div>
        <div class="practice-step">
          <div class="step-number">4</div>
          <div class="step-content">
            <strong>Adjust decimal:</strong><br>
            Original total decimal places: ${totalDecimals}<br>
            Place decimal point ${totalDecimals} places from the right:<br>
            ${multiplied} ‚Üí ${teacherResult}
          </div>
        </div>`;
    
      document.getElementById('teacher-problem').textContent = `Example: ${teacherNum1} √ó ${teacherNum2}`;
      document.getElementById('problem-text').textContent = `Problem: ${studentNum1} √ó ${studentNum2}`;
      document.getElementById('student-problem').textContent = `${studentNum1} √ó ${studentNum2}`;
    
      const studentDec1 = (studentNum1.split('.')[1] || '').length;
      const studentDec2 = (studentNum2.split('.')[1] || '').length;
      const studentTotalDecimals = studentDec1 + studentDec2;
      const studentWholeNum1 = parseInt(studentNum1.replace('.', ''));
      const studentWholeNum2 = parseInt(studentNum2.replace('.', ''));
      const studentResult = (studentWholeNum1 * studentWholeNum2 / Math.pow(10, studentTotalDecimals)).toFixed(2);
    
      const stepsDiv = document.getElementById('student-steps');
      stepsDiv.innerHTML = '';
    
      addStep(stepsDiv, 'step1',
        `<strong>Count decimal places:</strong><br>
        First number: <input id="step1-num1" class="input-step" placeholder="?" size="1"/> 
        Second number: <input id="step1-num2" class="input-step" placeholder="?" size="1"/>
        <button class="btn btn-outline-primary btn-sm step-check-btn" data-step-id="step1">Check</button>
        <span id="step1-feedback"></span>`,
        { num1: studentDec1.toString(), num2: studentDec2.toString() },
        `Count how many digits are after the decimal point in each number.`);
    
      addStep(stepsDiv, 'step2',
        `<strong>Convert to whole numbers:</strong><br>
        ${studentNum1} ‚Üí <input id="step2-num1" class="input-step" placeholder="?"/> 
        ${studentNum2} ‚Üí <input id="step2-num2" class="input-step" placeholder="?"/>
        <button class="btn btn-outline-primary btn-sm step-check-btn" data-step-id="step2">Check</button>
        <span id="step2-feedback"></span>`,
        { num1: studentWholeNum1.toString(), num2: studentWholeNum2.toString() },
        `Remove the decimal points to make whole numbers.`);
    
      const partials = [
        { 
          id: 'step3-1', 
          expression: `Multiply ones digits (${studentWholeNum1 % 10} √ó ${studentWholeNum2 % 10})`, 
          value: (studentWholeNum1 % 10) * (studentWholeNum2 % 10) 
        },
        { 
          id: 'step3-2', 
          expression: `Multiply ones by tens (${studentWholeNum1 % 10} √ó ${Math.floor(studentWholeNum2 / 10) * 10})`, 
          value: (studentWholeNum1 % 10) * Math.floor(studentWholeNum2 / 10) * 10 
        },
        { 
          id: 'step3-3', 
          expression: `Multiply tens by ones (${Math.floor(studentWholeNum1 / 10) * 10} √ó ${studentWholeNum2 % 10})`, 
          value: Math.floor(studentWholeNum1 / 10) * 10 * (studentWholeNum2 % 10) 
        },
        { 
          id: 'step3-4', 
          expression: `Multiply tens by tens (${Math.floor(studentWholeNum1 / 10) * 10} √ó ${Math.floor(studentWholeNum2 / 10) * 10})`, 
          value: Math.floor(studentWholeNum1 / 10) * 10 * Math.floor(studentWholeNum2 / 10) * 10 
        }
      ];
    
      let sum = 0;
      partials.forEach((p, idx) => {
        sum += p.value;
        addStep(stepsDiv, p.id,
          `${p.expression}: <input id="${p.id}" class="input-step" placeholder="?"/>
          <button class="btn btn-outline-primary btn-sm step-check-btn" data-step-id="${p.id}">Check</button>
          <span id="${p.id}-feedback"></span>`,
          p.value.toString(),
          `Partial multiplication step`);
      });
    
      addStep(stepsDiv, 'step3-5',
        `<strong>Add all partial products:</strong><br>
        <input id="step3-5" class="input-step" placeholder="?"/>
        <button class="btn btn-outline-primary btn-sm step-check-btn" data-step-id="step3-5">Check</button>
        <span id="step3-5-feedback"></span>`,
        sum.toString(),
        `Add results from all previous steps: ${partials.map(p => p.value).join(' + ')}`);
    
        addStep(stepsDiv, 'step4',
  `<strong>Place decimal point (${studentTotalDecimals} places from right):</strong><br>
  Move the decimal ${studentTotalDecimals} places left to get the final result:<br>
        <input id="step4" class="input-step" placeholder="?"/>
        <button class="btn btn-outline-primary btn-sm step-check-btn" data-step-id="step4">Check</button>
        <span id="step4-feedback"></span>`,
        studentResult,
        `Original numbers had ${studentDec1} + ${studentDec2} = ${studentTotalDecimals} decimal places total.`);
    
      document.getElementById('final-answer-box').style.display = 'none';
      document.getElementById('user-answer').value = '';
      document.getElementById('user-answer').disabled = false;
      document.getElementById('user-answer').classList.remove('correct', 'incorrect');
      document.getElementById('final-feedback').innerHTML = '';
      document.getElementById('summary').innerHTML = '';
      document.getElementById('try-again-btn').classList.add('hidden');
      document.getElementById('new-game-btn').classList.add('hidden');
      document.getElementById('next-question-btn').classList.add('hidden');
      document.getElementById('game-area').classList.remove('hidden');
      document.getElementById('question-count').textContent = questionCount + 1;
    }
    
    function addStep(container, id, html, correctValues, explanation = '') {
      const div = document.createElement('div');
      div.className = 'practice-step';
      let filledHtml = html;
    
      if (typeof correctValues === 'object') {
        for (const key in correctValues) {
          const val = correctValues[key];
          const regex = new RegExp(`id=\"${id}-${key}\"`, 'g');
          filledHtml = filledHtml.replace(regex, `id="${id}-${key}" data-correct="${val}"`);
        }
      } else {
        filledHtml = filledHtml.replace(/id=\"([^\"]+)\"/g, (m, p1) => `id="${p1}" data-correct="${correctValues}"`);
      }
    
      div.innerHTML = `<div class="step-number">${id.replace('step', '')}</div>
                       <div class="step-content">${filledHtml}
                       ${explanation ? `<div class="tooltip-explanation">${explanation}</div>` : ''}</div>`;
      container.appendChild(div);
    }
    
    function checkStep(id) {
      let allCorrect = true;
      const inputs = document.querySelectorAll(`input[id^="${id}-"], input#${id}`);
      inputs.forEach(input => {
        const correct = input.dataset.correct;
        if (input.value.trim() === correct) {
          input.classList.add('correct');
          input.classList.remove('incorrect');
          input.setAttribute('data-solved', 'true');
        } else {
          input.classList.add('incorrect');
          input.classList.remove('correct');
          allCorrect = false;
        }
      });
    
      const feedback = document.getElementById(`${id}-feedback`);
      if (allCorrect) {
        feedback.innerHTML = '<span class="text-success fw-bold">üéâ Correct!</span>';
        confetti({ particleCount: 60, spread: 45 });
        document.getElementById('success-sound')?.play();
        score++;
        document.getElementById('score').textContent = score;
        checkAllStepsComplete();
      } else {
        feedback.innerHTML = '<span class="text-danger">‚ùå Try again</span>';
      }
    }
    
    function resetStep(id) {
      const inputs = document.querySelectorAll(`input[id^="${id}-"], input#${id}`);
      inputs.forEach(input => {
        input.value = '';
        input.classList.remove('correct', 'incorrect');
        input.removeAttribute('data-solved');
      });
      document.getElementById(`${id}-feedback`).innerHTML = '';
    }
    
    function checkAllStepsComplete() {
      const steps = ['step1', 'step2', 'step3-1', 'step3-2', 'step3-3', 'step3-4', 'step3-5', 'step4'];
      let allComplete = true;
      for (const step of steps) {
        const inputs = document.querySelectorAll(`input[id^="${step}-"], input#${step}`);
        if ([...inputs].some(input => input.getAttribute('data-solved') !== 'true')) {
          allComplete = false;
          break;
        }
      }
      if (allComplete) {
        document.getElementById('final-answer-box').style.display = 'block';
        document.getElementById('final-answer-box').scrollIntoView({ behavior: 'smooth' });
      }
    }
    
    function submitFinal() {
      const input = document.getElementById('user-answer');
      const feedback = document.getElementById('final-feedback');
      const user = parseFloat(input.value);
      const correct = parseFloat(correctAnswer);
      if (Math.abs(user - correct) < 0.01) {
        input.classList.add('correct');
        input.classList.remove('incorrect');
        feedback.innerHTML = '<div class="text-success fw-bold">‚úÖ Correct!</div>';
        document.getElementById('final-celebration').innerHTML = `
          <div class="celebration">
            <div class="reward-message">üéä You Finished the Problem! üéä</div>
            <p>The correct answer to ${document.getElementById('student-problem').textContent} is <strong>${correctAnswer}</strong>.</p>
            <div class="reward-emoji">üéâ</div>
          </div>`;
        document.getElementById('final-celebration').classList.remove('hidden');
        document.getElementById('celebration-sound')?.play();
        confetti({ particleCount: 150, spread: 70 });
        document.getElementById('next-question-btn').classList.remove('hidden');
        score += 2;
        document.getElementById('score').textContent = score;
      } else {
        input.classList.add('incorrect');
        input.classList.remove('correct');
        feedback.innerHTML = '<div class="text-danger">‚ùå Try again. Tip: Check your decimals!</div>';
      }
    }
    
    function showSummary() {
      document.getElementById('summary').innerHTML = `<div class="celebration">
        <div class="reward-message">üéâ You finished the quiz!</div>
        <p>Your score: ${score} / ${maxQuestions * 2}</p>
        <p>${score >= maxQuestions * 1.8 ? 'üåü Excellent work!' : score >= maxQuestions ? 'üëç Good job!' : 'Keep practicing!'}</p>
        <div class="reward-emoji">üèÜ</div>
      </div>`;
      document.getElementById('try-again-btn').classList.remove('hidden');
      document.getElementById('new-game-btn').classList.remove('hidden');
      document.getElementById('celebration-sound')?.play();
      confetti({ particleCount: 200, spread: 100 });
    }
    
    function restartQuiz() {
      score = 0;
      questionCount = 0;
      document.getElementById('score').textContent = 0;
      document.getElementById('summary').innerHTML = '';
      setupProblem(currentDifficulty);
    }
    
    function newGame() {
      score = 0;
      questionCount = 0;
      document.getElementById('score').textContent = 0;
      document.getElementById('summary').innerHTML = '';
      document.getElementById('game-area').classList.add('hidden');
    }
    
    function nextQuestion() {
      questionCount++;
      setupProblem(currentDifficulty);
    }
    
    function updateProgress() {
      const percent = (questionCount / maxQuestions) * 100;
      document.getElementById('progress-bar').style.width = `${percent}%`;
    }
    
    function toggleDarkMode() {
      darkMode = !darkMode;
      document.body.classList.toggle('dark-mode');
      document.getElementById('toggle-theme').textContent = darkMode ? '‚òÄÔ∏è Light Mode' : 'üåô Dark Mode';
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      document.getElementById('easy-btn').addEventListener('click', () => {
        currentDifficulty = 'easy';
        questionCount = 0;
        score = 0;
        document.getElementById('game-area').classList.remove('hidden');
        setupProblem('easy');
      });
    
      document.getElementById('medium-btn').addEventListener('click', () => {
        currentDifficulty = 'medium';
        questionCount = 0;
        score = 0;
        document.getElementById('game-area').classList.remove('hidden');
        setupProblem('medium');
      });
    
      document.getElementById('hard-btn').addEventListener('click', () => {
        currentDifficulty = 'hard';
        questionCount = 0;
        score = 0;
        document.getElementById('game-area').classList.remove('hidden');
        setupProblem('hard');
      });
    
      document.getElementById('submit-final-btn').addEventListener('click', submitFinal);
      document.getElementById('try-again-btn').addEventListener('click', restartQuiz);
      document.getElementById('new-game-btn').addEventListener('click', newGame);
      document.getElementById('next-question-btn').addEventListener('click', nextQuestion);
      document.getElementById('toggle-theme').addEventListener('click', toggleDarkMode);
    
      document.addEventListener('click', function(e) {
        if (e.target.classList.contains('step-check-btn')) {
          const stepId = e.target.getAttribute('data-step-id');
          checkStep(stepId);
        } else if (e.target.classList.contains('try-again-btn')) {
          const stepId = e.target.getAttribute('data-step-id');
          resetStep(stepId);
        }
      });
    
      document.getElementById('max-questions').textContent = maxQuestions;
    });
  </script>
</body>
</html>